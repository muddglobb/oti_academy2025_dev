datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PaymentStatus {
  PAID
  APPROVED
}

enum UserType {
  DIKE
  UMUM
}

enum EnrollmentStatus {
  ENROLLED
  NOT_ENROLLED
}

enum GroupPaymentStatus {
  PENDING
  APPROVED
}

model Payment {
  id                String            @id @default(uuid())
  userId            String
  packageId         String
  courseId          String?           @default("00000000-0000-0000-0000-000000000000") // UBAH: tambahkan ? untuk nullable
  type              UserType
  proofLink         String
  status            PaymentStatus     @default(PAID)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Group Payment Fields
  isGroupPayment    Boolean           @default(false)
  inviteEmails      Json?             // Array email yang diinvite
  invitedUserIds    Json?             // Array user IDs yang divalidasi
  groupStatus       GroupPaymentStatus? // Status khusus group payment
  originalAmount    Decimal?          // Harga asli (90rb)
  discountedAmount  Decimal?          // Harga diskon (81rb)
  totalParticipants Int?              // Jumlah total participants
  memberCourses     Json?             // Array course choices per member
  
  // Relation to enrollments
  enrollments       Enrollment[]
}

model Enrollment {
  id         String           @id @default(uuid())
  paymentId  String
  userId     String
  courseId   String
  status     EnrollmentStatus @default(ENROLLED)
  progress   Float            @default(0)
  packageId  String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  // Relation to payment
  payment    Payment          @relation(fields: [paymentId], references: [id])

  @@unique([userId, courseId])
}