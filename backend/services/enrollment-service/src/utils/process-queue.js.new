import { promises as fs } from 'fs';
import path from 'path';
import enrollmentService from '../services/enrollment.service.js';

/**
 * Process enrollment queue
 * This script reads enrollment queue files from a folder and processes them
 */
async function processEnrollmentQueue(queueDir) {
  try {
    console.log(`Processing enrollment queue from ${queueDir}`);
    
    // Read all files in the enrollment queue directory
    const files = await fs.readdir(queueDir);
    const jsonFiles = files.filter(file => path.extname(file).toLowerCase() === '.json');
    
    console.log(`Found ${jsonFiles.length} enrollment queue files`);
    
    for (const file of jsonFiles) {
      try {
        const filePath = path.join(queueDir, file);
        const fileContent = await fs.readFile(filePath, 'utf8');
        const enrollmentData = JSON.parse(fileContent);
        
        console.log(`Processing enrollment: ${file}`);
        
        // Validate enrollment data
        if (!enrollmentData.userId || !enrollmentData.courseIds || !Array.isArray(enrollmentData.courseIds)) {
          console.error(`Invalid enrollment data in ${file}`);
          continue;
        }
        
        // Process enrollment
        await enrollmentService.enrollUserToCourses(
          enrollmentData.userId, 
          enrollmentData.packageId, 
          enrollmentData.courseIds
        );
        
        console.log(`Successfully processed enrollment: ${file}`);
        
        // Move processed file to archive folder
        const archiveDir = path.join(queueDir, 'archived');
        await fs.mkdir(archiveDir, { recursive: true });
        await fs.rename(filePath, path.join(archiveDir, file));
        
        console.log(`Moved ${file} to archive`);
      } catch (fileError) {
        console.error(`Error processing file ${file}:`, fileError);
      }
    }
    
    console.log('Enrollment queue processing completed');
  } catch (error) {
    console.error('Error processing enrollment queue:', error);
  }
}

// If this script is run directly
if (import.meta.url === `file://${process.argv[1]}`) {
  const queueDir = path.join(process.cwd(), 'enrollment-queue');
  processEnrollmentQueue(queueDir)
    .then(() => console.log('Done'))
    .catch(err => console.error('Fatal error:', err));
}

export default processEnrollmentQueue;
